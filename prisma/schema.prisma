// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Terminal {
  id          String   @id @default(uuid())
  chainId     Int
  safeAddress String
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requests    Request[]
  automations Automation[]

  @@unique([chainId, safeAddress])
}

model Account {
  id        String   @id @default(uuid())
  address   String   @unique
  chainId   Int      @default(0) // 0 is for wallets
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chainId, address])
}

model Subscription {
  id        String              @id @default(uuid())
  address   String
  variant   SubscriptionVariant
  requestId String

  request Request @relation(fields: [requestId], references: [id])
}

model Request {
  id              String             @id @default(uuid())
  terminalAddress String
  chainId         Int
  data            Json
  number          Int
  variant         RequestVariantType
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  terminal      Terminal       @relation(fields: [terminalAddress, chainId], references: [safeAddress, chainId])
  activities    Activity[]
  actions       Action[]
  subscriptions Subscription[]

  @@unique([terminalAddress, chainId, number(sort: Desc)])
}

model Activity {
  id        String          @id @default(uuid())
  requestId String
  address   String
  variant   ActivityVariant
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  data      Json

  request Request @relation(fields: [requestId], references: [id])
}

model Action {
  id          String        @id @default(uuid())
  // actionHash used by Spec indexer to upsert records to change status on execution
  actionHash  String        @unique
  requestId   String
  safeAddress String
  chainId     Int
  nonce       Int
  data        Json
  variant     ActionVariant
  status      ActionStatus
  txHash      String?

  request Request @relation(fields: [requestId], references: [id])
  proofs  Proof[]
}

model Proof {
  id          String   @id @default(uuid())
  signatureId String
  actionId    String
  path        String[]

  action    Action    @relation(fields: [actionId], references: [id])
  signature Signature @relation(fields: [signatureId], references: [id])
}

model Signature {
  id            String @id @default(uuid())
  signerAddress String
  data          Json

  proofs Proof[]
}

model Automation {
  id              String            @id @default(uuid())
  chainId         Int
  terminalAddress String
  variant         AutomationVariant
  data            Json
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  terminal Terminal @relation(fields: [chainId, terminalAddress], references: [chainId, safeAddress])
}

enum ActivityVariant {
  CREATE_REQUEST
  CREATE_AND_APPROVE_REQUEST
  APPROVE_REQUEST
  REJECT_REQUEST
  EXECUTE_REQUEST
  COMMENT_ON_REQUEST
}

enum RequestVariantType {
  SIGNER_QUORUM
  TOKEN_TRANSFER
  SPLIT_TOKEN_TRANSFER
}

enum SubscriptionVariant {
  TOKEN_RECIPIENT
}

// enum to potentially support more options in future for more complex requests
enum ActionVariant {
  APPROVAL // the expected execution for the request, e.g. a single token transfer, a member change
  REJECTION // rejects the intended execution for the request by burning a nonce
}

enum ActionStatus {
  NONE // default, nothing has happened yet
  PENDING // trying to execute the action, have a txnHash saved on the Action, used to show loading state
  SUCCESS // execution has completed successfully, updated after useWaitForTransaction or indexer completes
  FAILURE // execution has failed, updated through same as SUCCESS, tbd on what to do with this
}

enum AutomationVariant {
  REV_SHARE
}
