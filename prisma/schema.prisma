// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Terminal {
  id          String   @id @default(uuid())
  chainId     Int
  safeAddress String
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requests Request[]

  @@unique([chainId, safeAddress])
}

model Account {
  id        String   @id @default(uuid())
  address   String   @unique
  chainId   Int      @default(0)
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activities Activity[]

  @@unique([chainId, address])
}

model Subscription {
  id        String @id @default(uuid())
  address   String
  requestId String

  request Request @relation(fields: [requestId], references: [id])
}

model Request {
  id         String   @id @default(uuid())
  terminalId String
  data       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  terminal      Terminal       @relation(fields: [terminalId], references: [id])
  activities    Activity[]
  actions       Action[]
  subscriptions Subscription[]
}

model Activity {
  id        String          @id @default(uuid())
  requestId String
  address   String
  variant   ActivityVariant
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  data      Json
  accountId String

  request Request @relation(fields: [requestId], references: [id])
  account Account @relation(fields: [accountId], references: [id])
}

model Action {
  id          String @id @default(uuid())
  requestId   String
  safeAddress String
  chainId     Int
  nonce       Int
  data        Json

  request Request @relation(fields: [requestId], references: [id])
  proofs  Proof[]
}

model Proof {
  id          String   @id @default(uuid())
  signatureId String
  actionId    String
  path        String[]

  action    Action    @relation(fields: [actionId], references: [id])
  signature Signature @relation(fields: [signatureId], references: [id])
}

model Signature {
  id            String @id @default(uuid())
  signerAddress String
  data          Json

  proofs Proof[]
}

enum ActivityVariant {
  CREATE_REQUEST
  CREATE_AND_APPROVE_REQUEST
  APPROVE_REQUEST
  REJECT_REQUEST
  EXECUTE_REQUEST
  COMMENT_ON_REQUEST
}
